/* 
Octoscript program for implementation of Quicksort adopted from geeksforgeeks
*/

list<int> arr = [4, 3, 5, 2, 1, 3, 2, 3];
list<int> stack = [0, 0, 0, 0, 0, 0, 0, 0];
fn partition( list<int> arr, int l, int h) -> int {
    int i =  l - 1;
    int x = arr.get(h);
    int j = l;
    while ( j < h ){
        int temp = arr.get(j);
        if (temp <= x) {
            i = i + 1;
            int arr_i = arr.get(i);
            int arr_j = arr.get(j);
            arr.replace(j, arr_i);
            arr.replace(i, arr_j);
        }
        j = j + 1;
    }
    int idx = i + 1;
    int arr_i1 = arr.get(idx);
    
    int arr_h = arr.get(h);
    arr.replace(idx, arr_h);
    arr.replace(h, arr_i1);

    return idx;
}

int n = arr.length();
int l = 0;
int h = n - 1;

/* initialize top of stack */
int top = -1;

/* push initial values of l and h to stack */
top = top + 1;
stack.replace(top, l);
top = top + 1;
stack.replace(top, h);

/* Keep popping from stack while is not empty */
while (top >= 0){
    /* Pop h and l */
    h = stack.get(top);
    top = top - 1;
    l = stack.get(top);
    top = top - 1;

    /* Set pivot element at its correct position in sorted array */
    int p = partition( arr, l, h );

    int new_val = p - 1;
    /* If there are elements on left side of pivot, then push left side to stack */
    if (new_val > l){
        top = top + 1;
        stack.replace(top, l);
        top = top + 1;
        stack.replace(top, new_val);
    }

    new_val = p + 1;
    /* If there are elements on right side of pivot, then push right side to stack */
    if ( new_val < h ) {
        top = top + 1;
        stack.replace(top, new_val);
        top = top + 1;
        stack.replace(top, h);
    }
}


print ("Sorted array is:");
int i = 0;
while(i < n){
    print ("%d\n", arr.get(i));
    i = i + 1;
}