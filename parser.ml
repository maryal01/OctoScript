type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | SEMI
  | DOT
  | COLON
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | POW
  | LOG
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | FARROW
  | LARROW
  | RETURN
  | IF
  | ELSE
  | WHILE
  | PRINT
  | BREAK
  | INT
  | BOOL
  | FLOAT
  | NONE
  | STRING
  | LAMBDA
  | TABLE
  | LIST
  | TUPLE
  | INPUT
  | OUTPUT
  | ACCESS
  | APPEND
  | LENGTH
  | ILIT of (int)
  | BLIT of (bool)
  | SLIT of (string)
  | ID of (string)
  | FLIT of (float)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
 open Ast 
# 63 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACK *);
  262 (* RBRACK *);
  263 (* COMMA *);
  264 (* SEMI *);
  265 (* DOT *);
  266 (* COLON *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* POW *);
  272 (* LOG *);
  273 (* MOD *);
  274 (* ASSIGN *);
  275 (* NOT *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* FARROW *);
  285 (* LARROW *);
  286 (* RETURN *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* WHILE *);
  290 (* PRINT *);
  291 (* BREAK *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* NONE *);
  296 (* STRING *);
  297 (* LAMBDA *);
  298 (* TABLE *);
  299 (* LIST *);
  300 (* TUPLE *);
  301 (* INPUT *);
  302 (* OUTPUT *);
  303 (* ACCESS *);
  304 (* APPEND *);
  305 (* LENGTH *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* ILIT *);
  307 (* BLIT *);
  308 (* SLIT *);
  309 (* ID *);
  310 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\005\000\005\000\007\000\
\007\000\009\000\009\000\010\000\010\000\011\000\012\000\012\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\013\000\013\000\013\000\013\000\014\000\014\000\014\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\000\000\001\000\002\000\004\000\000\000\
\001\000\000\000\001\000\001\000\003\000\008\000\000\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\001\000\003\000\
\002\000\003\000\007\000\011\000\007\000\002\000\004\000\005\000\
\003\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\004\000\006\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\018\000\019\000\
\022\000\020\000\021\000\023\000\025\000\024\000\044\000\046\000\
\047\000\000\000\045\000\001\000\003\000\000\000\000\000\043\000\
\026\000\028\000\029\000\027\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\068\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\066\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\015\000\015\000\000\000\000\000\
\000\000\006\000\040\000\000\000\000\000\000\000\015\000\000\000\
\067\000\000\000\016\000\037\000\000\000\007\000\000\000\014\000\
\015\000\000\000\036\000"

let yydgoto = "\002\000\
\003\000\004\000\123\000\104\000\105\000\030\000\043\000\031\000\
\076\000\077\000\032\000\117\000\037\000\038\000"

let yysindex = "\019\000\
\000\000\000\000\000\000\008\004\027\255\027\255\021\255\021\255\
\021\255\002\255\035\255\021\255\019\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\255\000\000\000\000\000\000\240\254\172\004\000\000\
\000\000\000\000\000\000\000\000\000\000\005\255\255\254\044\255\
\040\255\040\255\038\255\251\004\021\255\021\255\251\004\000\000\
\021\255\021\255\007\255\000\000\253\254\021\255\021\255\021\255\
\021\255\021\255\021\255\021\255\021\255\021\255\021\255\021\255\
\021\255\021\255\021\255\021\255\000\000\027\255\000\000\000\000\
\063\004\152\004\251\004\051\255\047\255\192\004\208\255\000\000\
\021\255\075\255\015\255\015\255\026\255\026\255\026\255\026\255\
\026\255\144\255\144\255\144\255\144\255\144\255\144\255\014\005\
\014\005\000\000\077\255\084\255\000\000\021\255\000\000\082\255\
\083\255\039\255\212\004\021\255\000\000\000\000\251\004\085\255\
\208\255\000\000\000\000\087\255\081\255\135\255\000\000\041\255\
\000\000\059\255\000\000\000\000\189\255\000\000\092\255\000\000\
\000\000\106\004\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\014\255\011\255\000\000\000\000\
\088\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\232\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\055\000\109\000\000\000\089\255\000\000\000\000\062\004\000\000\
\096\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\255\000\000\097\255\000\000\099\255\000\000\
\000\000\000\000\181\001\235\001\163\000\217\000\019\001\073\001\
\127\001\034\002\088\002\142\002\196\002\250\002\048\003\102\003\
\156\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\255\000\000\000\000\096\255\000\000\000\000\037\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\099\000\000\000\000\000\177\255\000\000\002\000\
\253\255\000\000\000\000\150\255\036\000\101\000"

let yytablesize = 1575
let yytable = "\106\000\
\048\000\049\000\045\000\118\000\071\000\070\000\069\000\079\000\
\041\000\042\000\044\000\070\000\125\000\047\000\080\000\030\000\
\030\000\030\000\050\000\001\000\030\000\005\000\130\000\053\000\
\081\000\006\000\048\000\056\000\057\000\058\000\059\000\060\000\
\007\000\120\000\053\000\046\000\051\000\012\000\013\000\008\000\
\058\000\059\000\012\000\013\000\049\000\072\000\073\000\074\000\
\053\000\082\000\075\000\078\000\101\000\102\000\064\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\023\000\024\000\
\025\000\040\000\027\000\108\000\033\000\034\000\035\000\109\000\
\036\000\005\000\107\000\112\000\122\000\006\000\110\000\119\000\
\121\000\113\000\127\000\114\000\007\000\126\000\129\000\008\000\
\009\000\010\000\011\000\008\000\004\000\005\000\029\000\111\000\
\116\000\098\000\039\000\000\000\065\000\075\000\009\000\010\000\
\000\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\000\000\000\000\000\000\
\000\000\000\000\023\000\024\000\025\000\026\000\027\000\005\000\
\000\000\000\000\124\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\053\000\008\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\051\000\000\000\009\000\010\000\000\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\
\023\000\024\000\025\000\026\000\027\000\005\000\000\000\000\000\
\128\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\009\000\010\000\000\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\025\000\026\000\027\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\048\000\048\000\000\000\048\000\
\048\000\048\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\053\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\064\000\
\064\000\000\000\064\000\064\000\000\000\064\000\064\000\000\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\055\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\064\000\064\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\000\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\065\000\065\000\000\000\
\065\000\065\000\000\000\065\000\065\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\054\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\000\000\000\000\065\000\065\000\000\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\051\000\051\000\000\000\051\000\051\000\
\000\000\051\000\051\000\000\000\000\000\051\000\051\000\051\000\
\051\000\000\000\000\000\051\000\049\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\000\000\
\051\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\052\000\052\000\000\000\052\000\052\000\000\000\052\000\
\052\000\000\000\000\000\052\000\052\000\052\000\052\000\000\000\
\000\000\052\000\050\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\052\000\052\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\053\000\053\000\000\000\053\000\053\000\
\000\000\053\000\053\000\000\000\000\000\053\000\053\000\053\000\
\053\000\056\000\000\000\053\000\000\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\000\000\
\053\000\053\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
\000\000\000\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\055\000\055\000\000\000\055\000\055\000\000\000\055\000\
\055\000\000\000\000\000\055\000\055\000\055\000\055\000\057\000\
\000\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\000\000\055\000\055\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
\000\000\000\000\055\000\055\000\055\000\055\000\055\000\054\000\
\054\000\000\000\054\000\054\000\000\000\054\000\054\000\000\000\
\000\000\054\000\054\000\054\000\054\000\058\000\000\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\054\000\000\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\049\000\049\000\000\000\
\049\000\049\000\000\000\049\000\049\000\000\000\000\000\049\000\
\049\000\000\000\000\000\059\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\000\000\049\000\049\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\050\000\050\000\000\000\050\000\050\000\
\000\000\050\000\050\000\000\000\000\000\050\000\050\000\000\000\
\000\000\060\000\000\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\000\000\000\000\
\050\000\050\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\000\000\056\000\056\000\000\000\056\000\056\000\000\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\056\000\
\056\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\057\000\057\000\000\000\057\000\057\000\000\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\000\000\000\000\057\000\057\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\058\000\058\000\
\000\000\058\000\058\000\000\000\058\000\058\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\058\000\058\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\059\000\059\000\000\000\059\000\
\059\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\060\000\060\000\000\000\060\000\060\000\000\000\
\060\000\060\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\060\000\
\060\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\000\000\
\000\000\000\000\000\000\060\000\060\000\060\000\060\000\060\000\
\061\000\061\000\000\000\061\000\061\000\000\000\061\000\061\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\000\000\000\000\061\000\061\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\062\000\062\000\
\000\000\062\000\062\000\000\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\000\000\000\000\062\000\062\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\063\000\063\000\000\000\063\000\
\063\000\000\000\063\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\000\000\
\000\000\063\000\063\000\000\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\063\000\
\063\000\063\000\035\000\000\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\000\000\000\000\000\000\035\000\035\000\035\000\035\000\035\000\
\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\000\000\
\000\000\023\000\024\000\025\000\026\000\027\000\042\000\000\000\
\099\000\042\000\042\000\000\000\000\000\000\000\000\000\053\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\042\000\000\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\005\000\000\000\000\000\131\000\006\000\042\000\
\042\000\042\000\042\000\042\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\000\000\000\000\
\000\000\100\000\000\000\023\000\024\000\025\000\026\000\027\000\
\053\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\052\000\053\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\103\000\
\053\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\115\000\053\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\048\000\
\048\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\053\000\000\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\053\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000"

let yycheck = "\079\000\
\000\000\001\001\001\001\110\000\006\001\007\001\002\001\001\001\
\007\000\008\000\009\000\007\001\119\000\012\000\008\001\002\001\
\006\001\007\001\018\001\001\000\007\001\001\001\129\000\009\001\
\018\001\005\001\008\001\013\001\014\001\015\001\016\001\017\001\
\012\001\113\000\009\001\001\001\053\001\002\001\002\001\019\001\
\015\001\016\001\007\001\007\001\001\001\008\001\045\000\046\000\
\009\001\053\001\049\000\050\000\002\001\007\001\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\050\001\051\001\
\052\001\053\001\054\001\001\001\050\001\051\001\052\001\003\001\
\054\001\001\001\081\000\002\001\004\001\005\001\003\001\003\001\
\002\001\007\001\032\001\053\001\012\001\053\001\003\001\008\001\
\008\001\002\001\002\001\019\001\002\001\002\001\004\000\102\000\
\108\000\070\000\006\000\255\255\000\000\108\000\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\001\001\
\255\255\255\255\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\009\001\019\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\000\000\255\255\030\001\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\001\001\255\255\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\030\001\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\255\255\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\255\255\
\004\001\005\001\255\255\007\001\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\255\255\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\000\000\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\255\255\004\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\000\000\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\000\000\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\255\255\004\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\000\000\
\255\255\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\255\255\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\000\000\255\255\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\255\255\
\004\001\005\001\255\255\007\001\008\001\255\255\255\255\011\001\
\012\001\255\255\255\255\000\000\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\255\255\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\000\000\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\001\001\002\001\255\255\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\001\001\002\001\255\255\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\001\001\002\001\
\255\255\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\053\001\054\001\001\001\002\001\255\255\004\001\
\005\001\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\030\001\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\001\001\002\001\255\255\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\001\001\002\001\255\255\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\001\001\002\001\
\255\255\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\030\001\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\050\001\
\051\001\052\001\053\001\054\001\001\001\002\001\255\255\004\001\
\005\001\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\030\001\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\001\001\255\255\255\255\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\001\001\255\255\255\255\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\001\001\255\255\
\002\001\004\001\005\001\255\255\255\255\255\255\255\255\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\019\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\030\001\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\001\001\255\255\255\255\004\001\005\001\050\001\
\051\001\052\001\053\001\054\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\002\001\255\255\050\001\051\001\052\001\053\001\054\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  SEMI\000\
  DOT\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  POW\000\
  LOG\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  FARROW\000\
  LARROW\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  PRINT\000\
  BREAK\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  NONE\000\
  STRING\000\
  LAMBDA\000\
  TABLE\000\
  LIST\000\
  TUPLE\000\
  INPUT\000\
  OUTPUT\000\
  ACCESS\000\
  APPEND\000\
  LENGTH\000\
  EOF\000\
  "

let yynames_block = "\
  ILIT\000\
  BLIT\000\
  SLIT\000\
  ID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 41 "parser.mly"
            ( _1 )
# 679 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                 ( []  )
# 685 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 45 "parser.mly"
                    ( _2 :: _1 )
# 693 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                  ( [] )
# 699 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 49 "parser.mly"
                  ( List.rev _1 )
# 706 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                            ( [(_1, _2)]     )
# 714 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                            ( (_3, _4) :: _1 )
# 723 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                  ( Noexpr )
# 729 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                  ( _1 )
# 736 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                  ( [] )
# 742 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 61 "parser.mly"
               ( List.rev _1 )
# 749 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                            ( [_1] )
# 756 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                         ( _3 :: _1 )
# 764 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmnt_list) in
    Obj.repr(
# 69 "parser.mly"
                                                             ( FunDecl(_2, _4, _1, List.rev _7) )
# 774 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                   ( [] )
# 780 "parser.ml"
               : 'stmnt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmnt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 73 "parser.mly"
                         ( _2 :: _1 )
# 788 "parser.ml"
               : 'stmnt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
           ( INT     )
# 794 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
           ( BOOLEAN )
# 800 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
           ( FLOAT   )
# 806 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
           ( STRING  )
# 812 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
           ( LAMBDA  )
# 818 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
           ( NONE    )
# 824 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
           ( TABLE   )
# 830 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
           ( TUPLE   )
# 836 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
           ( LIST    )
# 842 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
                            ( Int(_1)        )
# 849 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 89 "parser.mly"
                           ( Float(_1)       )
# 856 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 90 "parser.mly"
                            ( Boolean(_1)    )
# 863 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                            ( String(_1)   )
# 870 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                  ( [] )
# 876 "parser.ml"
               : 'array))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitives) in
    Obj.repr(
# 95 "parser.mly"
                  ( [_1] )
# 883 "parser.ml"
               : 'array))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primitives) in
    Obj.repr(
# 96 "parser.mly"
                             ( _3 :: _1 )
# 891 "parser.ml"
               : 'array))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                                             ( Expr _1               )
# 898 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 101 "parser.mly"
                                                             ( Return _2             )
# 905 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmnt_list) in
    Obj.repr(
# 102 "parser.mly"
                                                                       ( If(_3, _6, [])        )
# 913 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmnt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmnt_list) in
    Obj.repr(
# 103 "parser.mly"
                                                                                 ( If(_3, _6, _10)        )
# 922 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmnt_list) in
    Obj.repr(
# 104 "parser.mly"
                                                                       ( While(_3, _6)         )
# 930 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                                                             ( Break                 )
# 936 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                                             ( Assign(_1, _3)        )
# 944 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                                             ( Declare(_1, _2, _4) )
# 953 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 108 "parser.mly"
                                                             ( Declare(_1, _2, Noexpr))
# 961 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                                                             ( Print(_2)             )
# 968 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 110 "parser.mly"
                                                             ( _1            )
# 975 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 113 "parser.mly"
                            ( PrimLit(Int(_1))        )
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 114 "parser.mly"
                           ( PrimLit(Float(_1))       )
# 989 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 115 "parser.mly"
                            ( PrimLit(Boolean(_1))     )
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
                            ( PrimLit(String(_1))      )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
                         ( Var(_1)       )
# 1010 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                         ( Binop(_1, Add,   _3)      )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                         ( Binop(_1, Sub,   _3)      )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                         ( Binop(_1, Mul,   _3)      )
# 1034 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                         ( Binop(_1, Div,   _3)      )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                         ( Binop(_1, Pow,   _3)      )
# 1050 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                         ( Binop(_1, Mod,   _3)      )
# 1058 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                         ( Binop(_1, Log,   _3)      )
# 1066 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                         ( Binop(_1, EQ,    _3)      )
# 1074 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                         ( Binop(_1, NEQ,   _3)      )
# 1082 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                         ( Binop(_1, LT,    _3)      )
# 1090 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                         ( Binop(_1, LTE,   _3)      )
# 1098 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                         ( Binop(_1, GT,    _3)      )
# 1106 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                         ( Binop(_1, GTE,   _3)      )
# 1114 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                         ( Binop(_1, AND,   _3)      )
# 1122 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                         ( Binop(_1, OR,    _3)      )
# 1130 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                         ( Unop(NEG, _2)             )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                         ( Unop(NOT, _2)             )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 135 "parser.mly"
                              ( Call(_1, _3) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 136 "parser.mly"
                                       ( Apply(_1, _3, _5))
# 1161 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array) in
    Obj.repr(
# 137 "parser.mly"
                          ( ListLit(List.rev _2)    )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array) in
    Obj.repr(
# 138 "parser.mly"
                          ( TupleLit(List.rev _2)    )
# 1175 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
